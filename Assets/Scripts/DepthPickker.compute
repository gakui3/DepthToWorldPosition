#pragma kernel CSMain

struct HumanData
{
	float2 screenPos;
    float depth;
};

RWTexture2D<float4> debugTexture;
Texture2D<float4> depthTexture;
RWStructuredBuffer<HumanData> humanDatas;
float4 cameraPosition;
float uVMultiplierPortrait;
float4 screenSize;
float depthOffset;

SamplerState _LinearClamp;
SamplerState _PointClamp;

const static uint depthTextureWidth = 192;
const static uint depthTextureHeight = 256;

float2 adjustUV(float2 uv)
{
    float2 forMask = float2((1.0 - (uVMultiplierPortrait * 0.5f)) + (uv.x / uVMultiplierPortrait), uv.y);
    return float2(1.0 - forMask.y, 1.5 - forMask.x);   
}

float map(float value, float min1, float max1, float min2, float max2) {
    return min2 + (value - min1) * (max2 - min2) / (max1 - min1);
}

[numthreads(1,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    //depthTexture.GetDimensions(depthTextureHeight, depthTextureWidth);
    uint idx = id.x + id.y * (uint)depthTextureWidth;

    float2 uv = adjustUV(float2((float)id.x/depthTextureWidth, (float)id.y/depthTextureHeight));
    float depth = depthTexture.SampleLevel(_PointClamp, uv, 0).x * depthOffset;
    debugTexture[id.xy] = float4(depth, 0, 0, 1);

    uint x = (uint)floor(map(id.x, 0, depthTextureWidth, 0, screenSize.x));
    uint y = (uint)floor(map(id.y, 0, depthTextureHeight, 0, screenSize.y));

    humanDatas[idx].screenPos = float2(x,y);
    humanDatas[idx].depth = depth;
}
